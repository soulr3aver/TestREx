from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import UnexpectedAlertPresentException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoAlertPresentException
from pyvirtualdisplay import Display

class SeleniumWrapper():

    def __init__(self, browser_visible):
        if (not browser_visible):
            try:
                self.display = Display(visible=0, size=(800, 600))
                self.display.start()
            except Exception as ex:
                print('ERROR: %s' % ex)

    def __del__(self):
        if hasattr(self, "display"):
            self.display.stop()

    def set_logger(self, logger):
        self.logger = logger

    def open_browser(self):
        self.logger.debug("Getting the browser instance...")
        fp = webdriver.FirefoxProfile()
        fp.set_preference("browser.fixup.alternate.enabled", False)
        self.driver = webdriver.Firefox(firefox_profile=fp)

    def kill_browser(self):
        try:
            if (hasattr(self, "driver")):
                self.logger.debug("Disposing the browser instance...")
                #before closing the browser, check if there are js dialogs hanging
                self.handle_alert_silent()
                self.driver.close()
        #handle the 'unexpected alert' exception without crashing everything
        except UnexpectedAlertPresentException:
            self.handle_alert_silent()
            self.driver.close()

    def navigate(self, link):
        self.logger.debug("Navigating to \"%s\"...", link)
        try:
            self.driver.get(link)
            self.logger.debug("...Success!")
        except UnexpectedAlertPresentException:
            self.handle_alert_silent()
            self.navigate(link)
        except Exception as error:
            self.logger.info("ERROR: unable to reach \"%s\"" % link)
            self.logger.debug(error)

    def page_source(self):
        self.logger.debug("Retrieving page source...")
        page_src = self.driver.page_source
        self.logger.debug("...Success!")
        return page_src


    def catch_alert(self):
        if (not self.alert_is_present()):
            return None
        self.logger.debug("Catching the alert box...")
        return self.driver.switch_to_alert()

    def handle_alert(self):
        alert = self.catch_alert()
        if (alert == None):
            return "alert is not present"
        else:
            text = alert.text
            self.logger.debug("Alert text: '%s'" % text)
            alert.dismiss()
            self.logger.debug("...alert dismissed!")
            return text

    def handle_alert_silent(self):
        if (self.alert_is_present()):
            self.driver.switch_to_alert().dismiss()

    def alert_is_present(self):
        try:
            alert = self.driver.switch_to_alert()
            alert.text
            return alert
        except NoAlertPresentException:
            return False

    def execute_js(self, script):
        self.logger.debug("Executing script '%s'" % script)
        self.driver.execute_script(script)


    def lookup_wait(self, identifier, selector, wait):
        try:
            self.logger.debug("Searching for element '%s' by %s...", identifier, selector)
            element = WebDriverWait(self.driver, wait).until(EC.presence_of_element_located((selector, identifier)))
            self.logger.debug("...Success!")
            return element
        except Exception as error:
            self.logger.debug("INFO: Element not found by '%s'" % selector)
            self.logger.debug(error)
            raise Exception("Element is not found!")


    def find_by(self, identifier, by, wait=0):
        element = self.lookup_wait(identifier, by, wait)
        if (element):
            return ElementWrapper(element)
        else:
            raise Exception("Element is not found!")

    def find(self, identifier, wait=0):
        selectors = (By.ID, By.NAME, By.TAG_NAME, By.CLASS_NAME, By.CSS_SELECTOR, By.LINK_TEXT, By.PARTIAL_LINK_TEXT, By.XPATH)
        for selector in selectors:
            try:
                element = self.lookup_wait(identifier, selector, wait)
                if (element):
                    return ElementWrapper(element)
            except:
                continue
        raise Exception("Element is not found!")


    def implicit_wait(self, seconds=1):
        self.logger.debug("Waiting...")
        self.driver.implicitly_wait(seconds)
        self.logger.debug("... end of implicit wait.")

class ElementWrapper():
    def __init__(self, element):
        self.raw = element

    def click(self):
        self.raw.click()
        return self

    def keys(self, string):
        self.raw.send_keys(string)
        return self

    def clear(self):
        self.raw.clear()
        return self

    def is_enabled(self):
        return self.raw.is_enabled()
